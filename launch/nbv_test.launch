<launch>
   <arg name="param_file" default="$(find victim_localization)/config/nbv_params.yaml" />
   <arg name="grid_map_visualizer" default="true"/>
   <arg name="debug" default="true"/>
   <arg name="enable_vision" default="true"/>
   <arg name="enable_rviz" default="true"/>
   <arg name="enable_graph" default="true"/>

<include file="$(find victim_localization)/launch/vehicle_setup.launch"/>

<node pkg="victim_localization" type="test_NBV" name="test_NBV" output="screen" required="true" if="$(arg debug)" launch-prefix="gdb -ex run --args" >
       <rosparam file="$(find victim_localization)/config/costmap_params.yaml" command="load" ns="costmap" />
       <rosparam file="$(find victim_localization)/config/reactive_planner_params.yaml" command="load"/>
       <rosparam file="$(find victim_localization)/config/octomap_manager_params.yaml" command="load"/>
       <rosparam command="load" file="$(arg param_file)" />
</node>

<node pkg="victim_localization" type="test_NBV" name="test_NBV" output="screen" required="true" unless="$(arg debug)">
       <rosparam file="$(find victim_localization)/config/costmap_params.yaml" command="load" ns="costmap" />
       <rosparam file="$(find victim_localization)/config/reactive_planner_params.yaml" command="load"/>
       <rosparam file="$(find victim_localization)/config/octomap_manager_params.yaml" command="load"/>
       <rosparam command="load" file="$(arg param_file)" />
</node>

<!-- Launch iris_commander to manager iris drone-->

<node pkg="victim_localization" type="vehicle_commander" name="vehicle_commander" output="screen" >
<rosparam command="load" file="$(arg param_file)" />
</node>

<!-- Launch the grid map visualizer -->

<group if="$(arg grid_map_visualizer)">
<node pkg="grid_map_visualization" type="grid_map_visualization" name="DL">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_DL.yaml" />
</node>
<node pkg="grid_map_visualization" type="grid_map_visualization" name="thermal" output="screen">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_thermal.yaml" />
</node>
<node pkg="grid_map_visualization" type="grid_map_visualization" name="Combined" output="screen">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_combined.yaml" />
</node>
<node pkg="grid_map_visualization" type="grid_map_visualization" name="occlusion" output="screen">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_occlusion.yaml" />
</node>
<node pkg="grid_map_visualization" type="grid_map_visualization" name="wireless" output="screen">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_wireless.yaml" />
</node>
<node pkg="grid_map_visualization" type="grid_map_visualization" name="test" output="screen">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_test.yaml" />
</node>
<node pkg="grid_map_visualization" type="grid_map_visualization" name="Nav" output="screen">
<rosparam command="load" file="$(find victim_localization)/config/grid_published_map/victim_Map_Navigation.yaml" />
</node>
</group>

<node pkg="victim_localization" type="victim_detection_using_ssd_keras.py" name="victim_detection_using_ssd_keras" respawn="true" if="$(arg enable_vision)"/>

<node pkg="victim_localization" type="plot_ieration_info_combined.py" name="plot_ieration_info_combined"  if="$(arg enable_graph)"/>

<node name="rviz" pkg="rviz" type="rviz" args="-d $(find victim_localization)/rviz/test_NBZ1.rviz" if="$(arg enable_rviz)" />

</launch>
